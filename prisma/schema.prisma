generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  xp            Int       @default(0)
  level         Int       @default(1)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  progress      StoryProgress[]
  testResults   TestResult[]
  achievements  Achievement[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Story {
  id          String    @id @default(cuid())
  title       String
  description String
  content     Json
  state       String
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  progress    StoryProgress[]

  @@index([state])
}

model StoryProgress {
  id        String   @id @default(cuid())
  userId    String
  storyId   String
  progress  Int      @default(0)
  completed Boolean  @default(false)
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
  @@index([userId])
  @@index([storyId])
}

model Test {
  id          String    @id @default(cuid())
  title       String
  description String
  state       String
  questions   Json
  timeLimit   Int
  difficulty  String
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  results     TestResult[]

  @@index([state])
}

model TestResult {
  id        String   @id @default(cuid())
  userId    String
  testId    String
  score     Int
  answers   Json
  timeSpent Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([testId])
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  description String
  xpReward    Int
  unlockedAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}